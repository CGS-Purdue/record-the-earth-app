#!/bin/bash

##
# NPM SCRIPTS STORYBOOK COMMAND INTERFACE
# ---
## build-storybook -> '../@storybook/react/bin/build.js'
## start-storybook -> '../@storybook/react/bin/index.js'

BASE_DIR="$(npm prefix)"

#
# node ./node_modules/@storybook/react/dist/server/index.js

## GET PACKAGE VERSION TO ARCHIVE OR UPDATE CLEAN
# npm version [<newversion> | major | minor | patch
#                           | premajor | preminor | prepatch
#                           | prerelease [--preid=<prerelease-id>] | from-git]
# TEMP WORKAROUND
BOOK_PACKAGE_VERSION="$(npm run env | grep npm_package_version= | sed 's/npm_package_version=/v/')"

# PROJECT SETUP
BOOK_STATIC_DIR="static"
BOOK_CONFIG_DIR=".storybook"
BOOK_OUTPUT_DIR="deploy"

BOOK_DEPLOY_DIR="$BOOK_OUTPUT_DIR/current"
BOOK_ARCHIVE_DIR="$BOOK_OUTPUT_DIR/$BOOK_PACKAGE_VERSION"

# COMMAND OPTIONS
BOOK_FLAGS=" --no-dll --debug-webpack"

# ALLOW LOCAL .NPMRC OR .ENV FILE TO OVERRIDE
if [ -f "$(npm prefix)/.npmrc" ]; then
  echo "Loading project env"
  . "$(npm prefix)/.npmrc"
fi


# 1. BUILD TO TAGGED VERSION ARCHIVE FIRST
# 2. MOVE/UPDATE INTO DEPLOY REPOSITORY AFTER TEST
# 3. RSYNC AND BUMP VERSION ON NPM
# 4. TAG COMMIT IN GIT THEN PUSH CLEAN

echo -e "NPM SCRIPTS STORYBOOK COMMAND INTERFACE\n" 

echo -e "[commands]
  build  (build-storybook) -> ../@storybook/react/bin/build.js
  start  (start-storybook) -> ../@storybook/react/bin/index.js
"

echo "[settings]
  config-dir:  $BOOK_CONFIG_DIR
  static-dir:  $BOOK_STATIC_DIR
  output-dir:  $BOOK_ARCHIVE_DIR
  cli-flags:  ${BOOK_FLAGS}
"
