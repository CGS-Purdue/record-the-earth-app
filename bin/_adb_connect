#!/bin/bash

BASE_DIR="$(npm prefix)"

[[ -f .npmrc ]] && source .npmrc

# Android Debug Bridge version 1.0.41
# Version 29.0.2-5738569
# Installed as /data/projects/5_Android_Projects/AndroidSDK/platform-tools/adb
# global options:
#  -a         listen on all network interfaces, not just localhost
#  -d         use USB device (error if multiple devices connected)
#  -e         use TCP/IP device (error if multiple TCP/IP devices available)
#  -s SERIAL  use device with given serial (overrides $ANDROID_SERIAL)
#  -t ID      use device with given transport id
#  -H         name of adb server host [default=localhost]
#  -P         port of adb server [default=5037]
#  -L SOCKET  listen on given socket for adb server [default=tcp:localhost:5037

[[ -z $ANDROID_HOME ]] && echo 'ANDROID_HOME is not set. Skipping command' && exit 0
ABD_PATH="${ANDROID_HOME}/platform-tools"
ANDROID_SERIAL="025abd11727717ac"

# RCT_METRO_PORT=8081
$ANDROID_HOME/platform-tools/adb devices -l
$ANDROID_HOME/platform-tools/adb kill-server
$ANDROID_HOME/platform-tools/adb start-server
$ANDROID_HOME/platform-tools/adb devices -l

# $ANDROID_HOME/platform-tools/adb "$@"
# $ANDROID_HOME/platform-tools/adb connect localhost:19000
$ANDROID_HOME/platform-tools/adb reconnect


# /data/apps/reactotron/Reactotron.2.17.0.AppImage
# DEBUG_LOGGING="yes"
# export DEBUG_LOGGING

# push [--sync] LOCAL... REMOTE
#      copy local files/directories to device
#      --sync: only push files that are newer on the host than the device
#  pull [-a] REMOTE... LOCAL
#      copy files/dirs from device
#      -a: preserve file timestamp and mode
# sync [all|data|odm|oem|product|system|system_ext|vendor]
#     sync a local build from $ANDROID_PRODUCT_OUT to the device (default all)
#     -l: list but don't copy
#  [app installation]
#  install [-lrtsdg] [--instant] PACKAGE
#      push a single package to the device and install it
#  install-multiple [-lrtsdpg] [--instant] PACKAGE...
#      push multiple APKs to the device for a single package and install them
#  install-multi-package [-lrtsdpg] [--instant] PACKAGE...
#      push one or more packages to the device and install them atomically
#      -r: replace existing application
#      -t: allow test packages
#      -d: allow version code downgrade (debuggable packages only)
#      -p: partial application install (install-multiple only)
#      -g: grant all runtime permissions
#      --instant: cause the app to be installed as an ephemeral install app
#      --no-streaming: always push APK to device and invoke Package Manager as separate steps
#      --streaming: force streaming APK directly into Package Manager
#      --fastdeploy: use fast deploy
#      --no-fastdeploy: prevent use of fast deploy
#      --force-agent: force update of deployment agent when using fast deploy
#      --date-check-agent: update deployment agent when local version is newer and using fast deploy
#      --version-check-agent: update deployment agent when local version has different version code and using fast deploy
#      --local-agent: locate agent files from local source build (instead of SDK location)
#  uninstall [-k] PACKAGE
#      remove this app package from the device
#      '-k': keep the data and cache directories
# [scripting]
#  wait-for[-TRANSPORT]-STATE
#      wait for device to be in the given state
#      STATE: device, recovery, rescue, sideload, bootloader, or disconnect
#      TRANSPORT: usb, local, or any [default=any]
#  get-state                print offline | bootloader | device
#  get-serialno             print <serial-number>
#  get-devpath              print <device-path>
#  remount [-R]
#       remount partitions read-write. if a reboot is required, -R will
#       will automatically reboot the device.
#  reboot [bootloader|recovery|sideload|sideload-auto-reboot]
#      reboot the device; defaults to booting system image but
#      supports bootloader and recovery too. sideload reboots
#      into recovery and automatically starts sideload mode,
#      sideload-auto-reboot is the same but reboots after sideloading.
#  sideload OTAPACKAGE      sideload the given full OTA package
#  root                     restart adbd with root permissions
#  unroot                   restart adbd without root permissions
#  usb                      restart adbd listening on USB
#  tcpip PORT               restart adbd listening on TCP on PORT
