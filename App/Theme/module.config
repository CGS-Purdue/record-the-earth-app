import { terser }from 'rollup-plugin-terser';
import cleanup  from   'rollup-plugin-cleanup';
import commonjs  from   'rollup-plugin-commonjs';
import executable  from   'rollup-plugin-executable';
import filesize  from   'rollup-plugin-filesize';
import json  from   'rollup-plugin-json';
import babel  from 'rollup-plugin-babel';
import smartAsset  from 'rollup-plugin-smart-asset';
import resolve  from   'rollup-plugin-node-resolve';
// import uglify  from   'rollup-plugin-terser';
// // const { terser } = require('rollup-plugin-terser');
// const executable = require('rollup-plugin-executable');
// const filesize = require('rollup-plugin-filesize');
// const cleanup = require('rollup-plugin-cleanup');
// // const uglify = require('rollup-plugin-terser');
// const json = require('rollup-plugin-json');
// const commonjs = require('rollup-plugin-commonjs');
// const resolve = require('rollup-plugin-node-resolve');


const smartAssetOpts = {
  // |const cssExportMap = {};
  // import postcss from 'rollup-plugin-postcss';
  // import postcssModules from 'postcss-modules';
  // Mode: rebase | copy | inline
  // Rebase asset references to
  // babel/plugin-proposal-export-default-from
  extensions: [ ".svg", ".jpg", ".gif", ".png",".ttf" ],
  // keepImport: false,
  // rebasePath: false,
  // sourceMap: false,
}



export default {
  input: './index.js',
  output: {
    file: './dist/bundle.js',
    format: 'cjs'
  },
  external: [
    'react',
    'react-proptypes'
  ],
  plugins: [
    smartAsset(smartAssetOpts),
    resolve({}),
    //
    //   // the fields to scan in a package.json to determine the entry point
    //   // if this list contains "browser", overrides specified in "pkg.browser"
    //   // will be used
    //   mainFields: ['module', 'main'], // Default: ['module', 'main']
    //
    //   // DEPRECATED: use "mainFields" instead
    //   // use "module" field for ES6 module if possible
    //   module: true, // Default: true
    //
    //   // DEPRECATED: use "mainFields" instead
    //   // use "jsnext:main" if possible
    //   // legacy field pointing to ES6 module in third-party libraries,
    //   // deprecated in favor of "pkg.module":
    //   // - see: https://github.com/rollup/rollup/wiki/pkg.module
    //   jsnext: true,  // Default: false
    //
    //   // DEPRECATED: use "mainFields" instead
    //   // use "main" field or index.js, even if it's not an ES6 module
    //   // (needs to be converted from CommonJS to ES6)
    //   // â€“ see https://github.com/rollup/rollup-plugin-commonjs
    //   main: true,  // Default: true
    //
    //   // some package.json files have a "browser" field which specifies
    //   // alternative files to load for people bundling for the browser. If
    //   // that's you, either use this option or add "browser" to the
    //   // "mainfields" option, otherwise pkg.browser will be ignored
    //   browser: true,  // Default: false
    //   // not all files you want to resolve are .js files
    //   extensions: [ '.mjs', '.js', '.jsx', '.json' ],  // Default: [ '.mjs', '.js', '.json', '.node' ]
    //   // whether to prefer built-in modules (e.g. `fs`, `path`) or
    //   // local ones with the same names
    //   preferBuiltins: false,  // Default: true
    //   // Lock the module search in this path (like a chroot). Module defined
    //   // outside this path will be marked as external
    //   jail: '/my/jail/path', // Default: '/'
    //   // Set to an array of strings and/or regexps to lock the module search
    //   // to modules that match at least one entry. Modules not matching any
    //   // entry will be marked as external
    //   only: [ 'some_module', /^@some_scope\/.*$/ ], // Default: null
    //   // If true, inspect resolved files to check that they are
    //   // ES2015 modules
    //   modulesOnly: true, // Default: false
    //   // Force resolving for these modules to root's node_modules that helps
    //   // to prevent bundling the same package multiple times if package is
    //   // imported from dependencies.
    //   dedupe: [ 'react', 'react-dom' ], // Default: []
    //
    //   // Any additional options that should be passed through
    //   // to node-resolve
    //   customResolveOptions: {
    //     moduleDirectory: 'js_modules'
    //   }
    // }),
//
      // commonjs({}),
    //   // non-CommonJS modules will be ignored, but you can also
    //   // specifically include/exclude files
    //   // include: 'node_modules/**',  // Default: undefined
    //   // exclude: [ 'node_modules/foo/**', 'node_modules/bar/**' ],  // Default: undefined
    //   // these values can also be regular expressions
    //   // include: /node_modules/
    //   // search for files other than .js files (must already
    //   // be transpiled by a previous plugin!)
    //   extensions: [ '.js' ],  // Default: [ '.js' ]
    //   // if true then uses of `global` won't be dealt with by this plugin
    //   // ignoreGlobal: false,  // Default: false
    //   // if false then skip sourceMap generation for CommonJS modules
    //   sourceMap: false,  // Default: true
    //   // explicitly specify unresolvable named exports
    //   // (see below for more details)
    //   // namedExports: { 'react': ['ceateElement', 'Component' ] },  // Default: undefined
    //   // sometimes you have to leave require statements
    //   // unconverted. Pass an array containing the IDs
    //   // or a `id => boolean` function. Only use this
    //   // option if you know what you're doing!
    //   // ignore: [ 'conditional-runtime-dependency' ]
    // }),
    // // postcss({
    // // plugins: [
    // //   // postcssModules({
    // //     // getJSON (id, exportTokens) {
    // //       // cssExportMap[id] = exportTokens;
    // //     // }
    // //   // })
    // // ],
    // // getExportNamed: false,
    // // getExport (id) {
    // // return cssExportMap[id];
    // // },
    // // extract: 'dist/styles.css',
    // // }),
    //
    babel({
      plugins: ["@babel/plugin-proposal-export-default-from"],
      exclude: 'node_modules/**'
    })
  ]
}


var cleanup_options = {
  comments: 'some',
  maxEmptyLines: 1,
  sourcemap: false,
  compactComments: true,
  extensions: ['.js'],
  lineEndings: 'unix',
};



const resolve_options = {
  mainFields: ['main'], // Default: ['module', 'main']
  extensions: [ '.js', '.json' ],
  preferBuiltins: true,
  // jail: '/lib', // Default: '/'
  // only: [ 'some_module', /^@some_scope\/.*$/ ], // Default: null
  // modulesOnly: true, // Default: false
  // dedupe: [], // Default: []
  customResolveOptions: {
    moduleDirectory: 'lib'
  }
};



// All JSON files will be parsed by default,
const json_options = {
  include: '../package.json',
  exclude: [ 'node_modules/**'],
  preferConst: true,
  indent: '  ',
  compact: true,
  namedExports: true
};

// =====
// SETUP
// =====
const BUILD_ENV = process.env.NODE_ENV;

const mod = {
  name: 'apm-search',
  banner: '#!/usr/bin/env node',
  path: './',
  input: 'index.js',
  output: BUILD_ENV === 'production' ? 'apm-search' : 'apm-search.dev.js',
  dest: './dist/',
  format: 'cjs',
  sourcemap: false,
  strict: true,
  watch: false,
  assets: false,
};

var bundle = [];

var config = {};
config.input = mod.path + mod.input;
config.output = {
  name: mod.name,
  file: mod.dest + mod.output,
  format: mod.format,
  sourcemap: mod.sourcemap,
  strict: mod.strict,
  watch: mod.watch,
  banner: mod.banner,
};

// PLUGINS
// -------
var pluginArr = [];
pluginArr.push(filesize());
pluginArr.push(json(json_options));
pluginArr.push(cleanup(cleanup_options));
pluginArr.push(resolve(resolve_options));
pluginArr.push(commonjs(commonjs_options));
pluginArr.push(executable());
// if (mod.assets) {
//  var asset_paths = [];
//  for ( var asset of mod.assets ) {
//    asset_paths.push( MOD_PATH + mod.name + '/' + asset);
//  }
//  pluginArr.push(copy({ assets: asset_paths }));
//  console.log(pluginArr);
// }
// PRODUCTION:PLUGINS
// ------------------
if (BUILD_ENV === 'production'){
  pluginArr.push(terser());
}

config.plugins = pluginArr;

if (mod.watch) {
  config.watch = mod.path;
}

bundle.push(config);

// export { bundle as default };
// const rollup = require('rollup');


var cleanup_options = {
  comments: 'some',
  maxEmptyLines: 1,
  sourcemap: false,
  compactComments: true,
  extensions: ['.js'],
  lineEndings: 'unix',
};


const commonjs_options = {
  // non-CommonJS modules will be ignored, but you can also
  // specifically include/exclude files
  include: 'lib/*',
  // exclude: [ 'node_modules/*' ],
  extensions: [ '.js' ],
  // if true then uses of `global` won't be dealt with by this plugin
  // ignoreGlobal: false,  // Default: false
  sourceMap: false,  // Default: true
  preferBuiltins: true,
  // namedExports: {
    // './lib/render': ['render'],
  // },
  // sometimes you have to leave require statements
  // ignore: [ 'conditional-runtime-dependency' ]
};

//
// const resolve_options = {
//   mainFields: ['main'], // Default: ['module', 'main']
//   extensions: [ '.js', '.json' ],
//   preferBuiltins: true,
//   // jail: '/lib', // Default: '/'
//   // only: [ 'some_module', /^@some_scope\/.*$/ ], // Default: null
//   // modulesOnly: true, // Default: false
//   // dedupe: [], // Default: []
//   customResolveOptions: {
//     moduleDirectory: 'lib'
//   }
// };
//
//
//
// // All JSON files will be parsed by default,
// const json_options = {
//   include: './package.json',
//   exclude: [ 'node_modules/**'],
//   preferConst: true,
//   indent: '  ',
//   compact: true,
//   namedExports: true
// };

// =====
// SETUP
// =====
// const BUILD_ENV = process.env.NODE_ENV;

// const mod = {
//   name: 'apm-search',
//   banner: '#!/usr/bin/env node',
//   path: './',
//   input: 'index.js',
//   output: BUILD_ENV === 'production' ? 'apm-search' : 'apm-search.dev.js',
//   dest: './dist/',
//   format: 'cjs',
//   sourcemap: false,
//   strict: true,
//   watch: false,
//   assets: false,
// };
//
// var bundle = [];
//
// var config = {};
// config.input = mod.path + mod.input;
// config.output = {
//   name: mod.name,
//   file: mod.dest + mod.output,
//   format: mod.format,
//   sourcemap: mod.sourcemap,
//   strict: mod.strict,
//   watch: mod.watch,
//   banner: mod.banner,
// };
//
// // PLUGINS
// // -------
// var pluginArr = [];
// pluginArr.push(filesize());
// pluginArr.push(json(json_options));
// pluginArr.push(cleanup(cleanup_options));
// pluginArr.push(resolve(resolve_options));
// pluginArr.push(commonjs(commonjs_options));
// pluginArr.push(executable());
// // if (mod.assets) {
// //  var asset_paths = [];
// //  for ( var asset of mod.assets ) {
// //    asset_paths.push( MOD_PATH + mod.name + '/' + asset);
// //  }
// //  pluginArr.push(copy({ assets: asset_paths }));
// //  console.log(pluginArr);
// // }
// // PRODUCTION:PLUGINS
// // ------------------
// if (BUILD_ENV === 'production'){
//   pluginArr.push(terser());
// }
//
// config.plugins = pluginArr;
//
// if (mod.watch) {
//   config.watch = mod.path;
// }
//
// bundle.push(config);
//
// export { bundle as default };
